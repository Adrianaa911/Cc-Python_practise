CONTROL FLOW
-- In Range
Let’s start the advanced challenge problems by testing if a number falls within a certain range.
We will accept three parameters where the first parameter is the number we are testing, the second parameter is the lower bound and the third parameter is the upper bound of our range.
These are the steps required:

1.Define the function to accept three numbers as parameters
2.Test if the number is greater than or equal to the lower bound and less than or equal to the upper bound
3.If this is true, return True, otherwise, return False

Create a function named in_range() that has three parameters named num, lower, and upper.
The function should return True if num is greater than or equal to lower and less than or equal to upper. Otherwise, return False.

def in_range(num, lower, upper):
  if (num >= lower and num <= upper):
    return True
  return False

print(in_range(10, 10, 10))
# should print True
print(in_range(5, 10, 20))
# should print False

-- Same Name
We need to write a program that checks different names and determines if they are equal.
We need to accept two strings and compare them. Here are the steps:

1.Define the function to accept two strings, your_name and my_name
2.Test if the two strings are equal
3.Return True if they are equal, otherwise return False
Create a function named same_name() that has two parameters named your_name and my_name.
If our names are identical, return True. Otherwise, return False.

def same_name(your_name, my_name):
  if(your_name == my_name):
    return True
  else:
    return False

print(same_name("Colby", "Colby"))
# should print True
print(same_name("Tina", "Amber"))
# should print False

 -- Always False
There are some situations that you normally want to avoid when programming using conditional statements. One example is a contradiction. This occurs when your condition will always be false no matter what value you pass into it.
Let’s create an example of a function that contains a contradiction. It will contain a few steps:
1.Define the function to accept a single parameter called num
2.Use a combination of <, > and and to create a contradiction in an if statement.
3.If the condition is true, return True, otherwise return False. The trick here is that because we’ve written a contradiction, the condition should never be true, so we should expect to always return False.

Create a function named always_false() that has one parameter named num.
Using an if statement, your variable num, and the operators >, and <, make it so your function will return False no matter what number is stored in num.
An if statement that is always false is called a contradiction. You will rarely want to do this while programming, but it is important to realize it is possible to do this.

def always_false(num):
  if (num > 0 & num < 0):
    return True
  else:
    return False

print(always_false(0))
# should print False
print(always_false(-1))
# should print False
print(always_false(1))
# should print False
