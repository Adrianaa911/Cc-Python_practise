-- 1. Append Size
For the first code challenge, we are going to calculate the length of an input list and append it to the end of the original list. For example, if we have the input list [23, 42, 108], 
which is of length 3, the output list should be [23, 42, 108, 3]. Similarly, the output for the input list [1, 23] should be [1, 23, 2].

Here is what you need to do:

Define a function append_size() that accepts a list as its input.
Get the length of the input list.
Append the length of the list to the end of the original list.
Return the modified list.

Create a function called append_size() that has one parameter named my_list.
The function should append the size of my_list (inclusive) to the end of my_list. The function should then return this new list.
For example, if my_list was [23, 42, 108], the function should return [23, 42, 108, 3] because the size of my_list was originally 3.

def append_size(input_list):
  # Get the length of the input list
  length=len(input_list)
  # Append the calculated length to the original list
  input_list.append(length)
  # Return the modified list
  return input_list

-- 2. Append Sum
For the next challenge, let’s create a function that calculates the sum of the last two elements of an input list and appends it to the end of the original list.
After doing so, it repeats this process two more times and returns the resulting list.
For example, for the input list [1, 1, 2], the output list should be [1, 1, 2, 3, 5, 8]. Similarly, the output for the input list [1, 23] should be [1, 23, 24, 47, 71].
To complete the challenge, you need to implement the following:

1.Define the function append_sum() to accept a list as its input argument.
2.Add the last and second-to-last elements of the input list.
3.Append the calculated sum to the end of the input list.
4.Repeat the previous two steps two more times for the modified list.
5.Return the modified list.

Write a function named append_sum() that has one parameter — a list named named my_list.
The function should add the last two elements of my_list together and append the result to my_list. It should do this process three times and then return my_list.
For example, if my_list started as [1, 1, 2], the final result should be [1, 1, 2, 3, 5, 8].


def append_sum(my_list):
  # Calculate the sum of last two elements and append it to the list
  my_list.append(my_list[-1] + my_list[-2])
  # Calculate the sum of last two elements and append it to the list
  my_list.append(my_list[-1] + my_list[-2])
  # Calculate the sum of last two elements and append it to the list
  my_list.append(my_list[-1] + my_list[-2])
  return my_list

print(append_sum([1, 1, 2]))


3. Larger List
Let’s say we are working with two conveyor belts that contain items represented by a numerical ID. If one conveyor belt contains more items than the other, then we need to return the ID of the last item on that belt.
In the case where they have the same number of items, return the last item from the first conveyor belt.
In our code, we can represent the id of the items using numbers and conveyor belts using lists. For instance, if we have two lists, [23, 12, 21] and [1, 23], representing the id of the items at two conveyor belts, the output will be 21.
Similarly, for input lists [1, 7, 2, 3, 17] and [1, 23, 24, 47, 71, 83], the output will be 83. For input lists [23, 12, 21] and [1, 23, 25], the output will be 21 as both lists are of the same length.

Here are the steps you need to complete this code challenge:
1.Define a function that accepts two parameters for our two lists of numbers.
2.Check if the length of the first list is greater than or equal to the length of the second list.
3.If true, then return the last element from the first list. Otherwise, return the last element from the second list.
Write a function named larger_list() that has two parameters named my_list1 and my_list2.
The function should return the last element of the list that contains more elements. If both lists are the same size, then return the last element of my_list1.

def larger_list(my_list1, my_list2):
  if len(my_list1) >= len(my_list2):
    return my_list1[-1]
  else:
    return my_list2[-1]

print(larger_list([4, 10, 2, 5], [-10, 2, 5, 10]))


4. More Than N
Our factory produces a variety of different flavored snacks. The different types of snacks are represented by their id and are kept on a conveyor belt.
We want to check if we have enough items of a certain snack in our inventory. For this, we need to write a Python function that does the following.

The function should accept a list of numbers representing the ids of snack on the conveyor belt as its first input, the id of snack we are looking for as its second input, and the desired number of that type of snack on the conveyor belt as its third input.
The function should return True if the snack we are searching for appears more times in the list than the desired number given in the third parameter. Otherwise, it should return False.
Following are the steps we need to implement the above scenario:

1.Define the function to accept three parameters: a list of numbers, a number to look for, and a number for the number of instances.
2.Count the number of occurrences of item i.e. the second parameter in my_list i.e. the first parameter.
3.If the number of occurrences is greater than n i.e. the third parameter, return True. Otherwise, return False.

Create a function named more_than_n() that has three parameters named my_list, item, and n.
The function should return True if item appears in the list more than n times. The function should return False otherwise.

def more_than_n(my_list, item, n ):
  if my_list.count(item) > n :
    return True
  else:
    return False

print(more_than_n([2, 4, 6, 2, 3, 2, 1, 2], 2, 3))

5. Combine Sort
Finally, let’s create a function that combines two different lists together and then sorts them. To do this, we can combine the lists with an operation and then sort using a function call. Here are the steps we need to use:
1.Define the function to accept two parameters, one for each list.
2. Combine the two lists using the + operator.
3. Sort the resultant list after concatenation.
4. Return the sorted list.

Write a function named combine_sort() that has two parameters named my_list1 and my_list2.
The function should combine these two lists into one new list and sort the result. Return the new sorted list.

def combine_sort(my_list1, my_list2):
  # Concatenate input lists
  unsorted = my_list1 + my_list2
  # Sort the concatenated list
  sorted_list = sorted(unsorted)
  return sorted_list

print(combine_sort([4, 10, 2, 5], [-10, 2, 5, 10]))

--  Every Three Numbers
Let’s start our challenging problems with a function that creates a list of numbers up to 100 in increments of 3 starting from a number that is passed to the function as an input parameter. 
Here is what we need to do:
1.Define the function to accept one parameter for our starting number
2.Calculate the numbers between the starting number and 100 while incrementing by 3
3.Store the numbers in a list
4.Return the list

Create a function called every_three_nums that has one parameter named start.
The function should return a list of every third number between start and 100 (inclusive). For example, every_three_nums(91) should return the list [91, 94, 97, 100]. 
If start is greater than 100, the function should return an empty list.

def every_three_nums(start):
  return list(range(start, 101, 3))

#We can write the body of this function in one line by nesting the range() function inside of the list() function.
#The range function accepts the starting number, the ending number (exclusive), and the amount to increment by.

-- Remove Middle
Our next function will remove all elements from a list with an index within a certain range. The function will accept a list, a starting index, and an ending index. 
All elements with an index between the starting and ending index should be removed from the list. Here are the steps:
1.Define the function to accept three parameters: the list, the starting index, and the ending index
2.Get all elements before the starting index
3.Get all elements after the ending index
4.Combine the two partial lists into the result
5.Return the result

Create a function named remove_middle which has three parameters named my_list, start, and end.
The function should return a list where all elements in my_list with an index between start and end (inclusive) have been removed.
For example, the following code should return [4, 23, 42] because elements at indices 1, 2, and 3 have been removed:

def remove_middle(my_list, start, end):
  return my_list[:start] + my_list[end+1:]

-- More Frequent Item
Let’s go back to our factory example. We have a conveyor belt of items where each item is represented by a different number. We want to know, out of two items, which one shows up more on our belt.
To solve this, we can use a function with three parameters. One parameter for the list of items, another for the first item we are comparing, and another for the second item. Here are the steps:

1.Define the function to accept three parameters: the list, the first item, and the second item
2.Count the number of times item1 shows up in our list
3.Count the number of times item2 shows up in our list
4.Return the item that appears more frequently in my_list — if both items show up the same number of times, return item1

Create a function named more_frequent_item that has three parameters named my_list, item1, and item2.
Return either item1 or item2 depending on which item appears more often in my_list.
If the two items appear the same number of times, return item1.

def more_frequent_item(my_list, item1, item2):
  if my_list.count(item1) >= my_list.count(item2):
    return item1
  else:
    return item2
