-- 1. Append Size
For the first code challenge, we are going to calculate the length of an input list and append it to the end of the original list. For example, if we have the input list [23, 42, 108], 
which is of length 3, the output list should be [23, 42, 108, 3]. Similarly, the output for the input list [1, 23] should be [1, 23, 2].

Here is what you need to do:

Define a function append_size() that accepts a list as its input.
Get the length of the input list.
Append the length of the list to the end of the original list.
Return the modified list.

Create a function called append_size() that has one parameter named my_list.
The function should append the size of my_list (inclusive) to the end of my_list. The function should then return this new list.
For example, if my_list was [23, 42, 108], the function should return [23, 42, 108, 3] because the size of my_list was originally 3.

def append_size(input_list):
  # Get the length of the input list
  length=len(input_list)
  # Append the calculated length to the original list
  input_list.append(length)
  # Return the modified list
  return input_list

-- 2. Append Sum
For the next challenge, let’s create a function that calculates the sum of the last two elements of an input list and appends it to the end of the original list.
After doing so, it repeats this process two more times and returns the resulting list.
For example, for the input list [1, 1, 2], the output list should be [1, 1, 2, 3, 5, 8]. Similarly, the output for the input list [1, 23] should be [1, 23, 24, 47, 71].
To complete the challenge, you need to implement the following:

1.Define the function append_sum() to accept a list as its input argument.
2.Add the last and second-to-last elements of the input list.
3.Append the calculated sum to the end of the input list.
4.Repeat the previous two steps two more times for the modified list.
5.Return the modified list.

Write a function named append_sum() that has one parameter — a list named named my_list.
The function should add the last two elements of my_list together and append the result to my_list. It should do this process three times and then return my_list.
For example, if my_list started as [1, 1, 2], the final result should be [1, 1, 2, 3, 5, 8].
