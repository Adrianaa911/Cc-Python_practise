*Add and remove items from a list using a specific index.
*Create lists with continuous values.
*Get the length of a list.
*Select portions of a list (called slicing).
*Count the number of times that an element appears in a list.
*Sort a list of items.

-- Adding by Index: Insert
The Python list method .insert() allows us to add an element to a specific index in a list.

The .insert() method takes in two inputs:
1.The index you want to insert into.
2.The element you want to insert at the specified index.
The .insert() method will handle shifting over elements and can be used with negative indices.

store_line = ["Karla", "Maxium", "Martim", "Isabella"]
store_line.insert(2, "Vikor")
print(store_line) 

Task:
front_display_list = ["Mango", "Filet Mignon", "Chocolate Milk"]
print(front_display_list)

1. Use .insert() to add "Pineapple" to the front of the list.

front_display_list.insert(0, "Pineapple")
print(front_display_list)

-- Removing by Index: Pop
 Python gives us a method to remove elements at a specific index using a method called .pop().

The .pop() method takes an optional single input: the index for the element you want to remove.

cs_topics = ["Python", "Data Structures", "Balloon Making", "Algorithms", "Clowns 101"]

#First let’s remove "Clowns 101"

removed_element = cs_topics.pop()
print(cs_topics)
print(removed_element)

#Lastly let’s remove "Balloon Making"
cs_topics.pop(2)
print(cs_topics)

Tasks:
data_science_topics = ["Machine Learning", "SQL", "Pandas", "Algorithms", "Statistics", "Python 3"]
print(data_science_topics)

1.Let’s remove the last item from the list of data_science_topics using our newly learned .pop() method.

data_science_topics.pop()
print(data_science_topics)

2. Looks like there is overlap on the "Algorithms" topic as well. Let’s use .pop() to remove it as well.
Print data_science_topics to see the changes.

data_science_topics.pop(-2)
print(data_science_topics)


-- Consecutive Lists: Range
Python gives us an easy way of creating these types of lists using a built-in function called range().
The function range() takes a single input, and generates numbers starting at 0 and ending at the number before the input.
So, if we want the numbers from 0 through 9, we use range(10) because 10 is 1 greater than 9:

my_range = range(10)
print(my_range)

range(0, 10)  #output


Notice something different? The range() function is unique in that it creates a range object. It is not a typical list like the ones we have been working with.

In order to use this object as a list, we have to first convert it using another built-in function called list().
The list() function takes in a single input for the object you want to convert.
We use the list() function on our range object like this:

print(list(my_range))

Would output:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Tasks:
1. Modify number_list so that it is a range containing numbers starting at 0 and up to, but not including, 9.

number_list = range(9)
print(list(number_list))
[0, 1, 2, 3, 4, 5, 6, 7, 8]  #output

2. Create a range called zero_to_seven with the numbers 0 through 7.
Print the result in list form.

zero_to_seven = range(8)
print(list(zero_to_seven))
[0, 1, 2, 3, 4, 5, 6, 7]   #output

-- The Power of Range!

By default,range() creates a list starting at 0. However, if we call range() with two inputs, we can create a list that starts at a different number.

For example, range(2, 9) would generate numbers starting at 2 and ending at 8 (just before 9):

my_list = range(2, 9)
print(list(my_list))
[2, 3, 4, 5, 6, 7, 8]

#If we use a third input, we can create a list that “skips” numbers.

my_range2 = range(2, 9, 2)
print(list(my_range2))
[2, 4, 6, 8]

my_range3 = range(1, 100, 10)
print(list(my_range3))
[1, 11, 21, 31, 41, 51, 61, 71, 81, 91]

Tasks:
Modify the range() function that created the range range_five_three such that it:
Starts at 5, Has a difference of 3 between each item, Ends before 15

range_five_three = range(5, 15, 3)
print(list(range_five_three))


2.Create a range called range_diff_five that:
Starts at 0, Has a difference of 5 between each item, Ends before 40

range_diff_five = range(0, 40, 5)
print(list(range_diff_five))

-- Length
Often, we’ll need to find the number of items in a list, usually called its length.
We can do this using a built-in function called len().
When we apply len() to a list, we get the number of elements in that list:

my_list = [1, 2, 3, 4, 5]

print(len(my_list))  #5


#Tasks:

long_list = [1, 5, 6, 7, -23, 69.5, True, "very", "long", "list", "that", "keeps", "going.", "Let's", "practice", "getting", "the", "length"]

big_range = range(2, 3000, 10)

1.Calculate the length of long_list and save it to the variable long_list_len.
long_list_len = len(long_list)

2.Use print() to examine long_list_len.
print(long_list_len)

3.We have provided a completed range() function for the variable big_range.
Calculate its length using the function len() and save it to a variable called big_range_length.
Note: Range objects do not need to be converted to lists in order to determine their length

big_range_length = len(big_range)

4.Use print() to examine big_range_length.
print(big_range_length)


-- Slicing Lists I

letters = ["a", "b", "c", "d", "e", "f", "g"]

Suppose we want to select from "b" through "f".
We can do this using the following syntax: letters[start:end], where:
- start is the index of the first element that we want to include in our selection. In this case, we want to start at "b", which has index 1.
- end is the index of one more than the last index that we want to include. The last element we want is "f", which has index 5, so end needs to be 6.

sliced_list = letters[1:6]
print(sliced_list)

-- Slicing Lists II

fruits = ["apple", "cherry", "pineapple", "orange", "mango"]

If we want to select the first n elements of a list, we could use the following code:

fruits[:n]

For our fruits list, suppose we wanted to slice the first three elements.
The following code would start slicing from index 0 and up to index 3. Note that the fruit at index 3 (orange) is not included in the results.

print(fruits[:3])

We can do something similar when we want to slice the last n elements in a list:

fruits[-n:]


For our fruits list, suppose we wanted to slice the last two elements.
This code slices from the element at index -2 up through the last index.

print(fruits[-2:])

Negative indices can also accomplish taking all but n last elements of a list.

fruits[:-n]


For our fruits example, suppose we wanted to slice all but the last element from the list.
This example starts counting from the 0 index up to the element at index -1.

print(fruits[:-1])

-- Counting in a List
In Python, it is common to want to count occurrences of an item in a list.
Suppose we have a list called letters that represents the letters in the word “Mississippi”:

letters = ["m", "i", "s", "s", "i", "s", "s", "i", "p", "p", "i"]

If we want to know how many times i appears in this word, we can use the list method called.count()

num_i = letters.count("i")
print(num_i)

Would output: 4

Notice that since .count() returns a value, we can assign it to a variable to use it.
We can even use .count() to count element appearances in a two-dimensional list.
Let’s use the list number_collection as an example:

number_collection = [[100, 200], [100, 200], [475, 29], [34, 34]]


If we wanted to know how often the sublist [100, 200] appears:

num_pairs = number_collection.count([100, 200])
print(num_pairs)

Would output: 2


-- Sorting Lists I

Often, we will want to sort a list in either numerical (1, 2, 3, …) or alphabetical (a, b, c, …) order.
We can sort a list using the method .sort()
Suppose that we have a list of names:

names = ["Xander", "Buffy", "Angel", "Willow", "Giles"]

Let’s see what happens when we apply .sort():

names.sort()
print(names)


Would output: ['Angel', 'Buffy', 'Giles', 'Willow', 'Xander']


As we can see, the .sort() method sorted our list of names in alphabetical order.

.sort() also provides us the option to go in reverse. Instead of sorting in ascending order like we just saw, we can do so in descending order.

names.sort(reverse=True)
print(names)

Would output: ['Xander', 'Willow', 'Giles', 'Buffy', 'Angel']


-- Sorting Lists II

A second way of sorting a list in Python is to use the built-in function sorted().

The sorted() function is different from the .sort() method in two ways:

It comes before a list, instead of after as all built-in functions do.
It generates a new list rather than modifying the one that already exists.
Let’s return to our list of names:

names = ["Xander", "Buffy", "Angel", "Willow", "Giles"]

Using sorted(), we can create a new list, called sorted_names:

sorted_names = sorted(names)
print(sorted_names)

This yields the list sorted alphabetically:

['Angel', 'Buffy', 'Giles', 'Willow', 'Xander']


Note that using sorted did not change names:

print(names)

Would output: ['Xander', 'Buffy', 'Angel', 'Willow', 'Giles']

