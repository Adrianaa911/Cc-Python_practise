-- Defining a Function

A function consists of many parts, so let’s first get familiar with its core - a function definition.

Here’s an example of a function definition:

def function_name():
  # functions tasks go here

There are some key components we want to note here:
The def keyword indicates the beginning of a function (also known as a function header). The function header is followed by a name in snake_case format that describes the task the function performs. 
It’s best practice to give your functions a descriptive yet concise name.
Following the function name is a pair of parenthesis ( ) that can hold input values known as parameters (more on parameters later in the lesson!). In this example function, we have no parameters.
A colon : to mark the end of the function header.
Lastly, we have one or more valid python statements that make up the function body (where we have our python comment).

Here is an example of a function that greets a user for our trip planning application:

def trip_welcome():
  print("Welcome to Tripcademy!") 
  print("Let's get you to your destination.")

--calling a function
Now that we’ve practiced defining a function, let’s learn about calling a function to execute the code within its body.

def directions_to_timesSq():
  print("Walk 4 mins to 34th St Herald Square train station.")
  print("Take the Northbound N, Q, R, or W train 1 stop.")
  print("Get off the Times Square 42nd Street stop.")
  print("Take lots of pictures!")

directions_to_timesSq()


-- Whitespace & Execution Flow

Consider our welcome function for our trip planning application:

def trip_welcome():
  print("Welcome to Tripcademy!") 
  print("Let's get you to your destination.")


The print statements all run together when trip_welcome() is called. This is because they have the same base level of indentation (2 spaces).

In Python, the amount of 
Preview: Docs Loading link description
whitespace
 tells the computer what is part of a function and what is not part of that function.

If we wanted to write another statement outside of trip_welcome(), we would have to unindent the new line:

def trip_welcome():
  # Indented code is part of the function body
  print("Welcome to Tripcademy!") 
  print("Let's get you to your destination.")

# Unindented code below is not part of the function body
print("Woah, look at the weather outside! Don't walk, take the train!")

trip_welcome()

Our trip_welcome() function steps will not print Woah, look at the weather outside! Don't walk, take the train! on our function call. 
The print() statement was unindented to show it was not a part of the function body but rather a separate statement.

#We would see the following output from this program:
Woah, look at the weather outside! Don't walk, take the train!
Welcome to Tripcademy!
Let's get you to your destination.

Lastly, note that the execution of a program always begins on the first line. The code is then executed one line at a time from top to bottom. This is known as execution flow and is the order a program in python executes code.

Woah, look at the weather outside! Don't walk, take the train! was printed before the print() statements from the function trip_welcome().

Even though our function was defined before our lone print() statement, we didn’t call our function until after.


Tasks:
1.We are going to help our trip planner users figure out if they should travel today based on the weather. Let’s let our users know we can check the weather for them.
Write a print() statement that will output Checking the weather for you!.

2.We took a look outside and see a bright sunny day. Write a function called weather_check() that will print a message to our users that it’s a great day to travel! The function should output:

Looks great outside! Enjoy your trip.

Note: Don’t call your function just yet! We will do that in the next step.

3.Oh no! It looks like some clouds came in and it started raining. Our users shouldn’t go on a trip in the rain. In our weather_check() function add a second print() statement under the first one which prints a warning message for our travelers! It should print:

False Alarm, the weather changed! There is a thunderstorm approaching. Cancel your plans and stay inside.

4.Call the function weather_check().

5.Unindent the final print statement (the one starting with “False Alarm”) in your weather_check() function. Run the program again.
What is different?

print("Checking the weather for you!")

def weather_check():
  print("Looks great outside! Enjoy your trip.")
print("False Alarm, the weather changed! There is a thunderstorm approaching. Cancel your plans and stay inside.")

weather_check()

-- Parameters & Arguments

Let’s return to our trip_welcome() function one more time! Let’s modify our function to give a welcome that is a bit more detailed.

def trip_welcome():
  print("Welcome to Tripcademy!") 
  print("Looks like you're going to Times Square today.")

trip_welcome()


This will output:

Welcome to Tripcademy!
Looks like you're going to Times Square today.


Our function does a really good job of welcoming anyone who is traveling to Times Square but a really poor job if they are going anywhere else.
In order for us to make our function a bit more dynamic, we are going to use the concept of function parameters
Function parameters allow our function to accept data as an input value. We list the parameters a function takes as input between the parentheses of a function ( ).

Here is a function that defines a single parameter:

def my_function(single_parameter)
  # some code


In the context of our trip_welcome() function, it would look like this:

def trip_welcome(destination):
  print("Welcome to Tripcademy!") 
  print("Looks like you're going to " + destination + " today.")


In the above example, we define a single parameter called destination and apply it in our function body in the second print statement.
We are telling our function it should expect some data passed in for destination that it can apply to any statements in the function body.

But how do we actually use this parameter? Our parameter of destination is used by passing in an argument to the function when we call it.

trip_welcome("Times Square")


This would output:

Welcome to Tripcademy!
Looks like you're going to Times Square today. 

tasks:
1.
We want to create a program that allows our users to generate the directions for their upcoming trip!

Create a function called generate_trip_instructions() that defines one parameter called location.

Note: Since we did not define any code in our function yet, we will receive an error in our output terminal. Don’t worry, we will be filling in the code in the next step.

Checkpoint 2 Passed
2.
generate_trip_instructions() should print out the following:

Looks like you are planning a trip to visit <location>


Where <location> will represent the location parameter.

Checkpoint 3 Passed
3.
generate_trip_instructions() should also let our users know they can reach their location using public transit.

Let’s have generate_trip_instructions()also print out the following on a new line:

You can use the public subway system to get to <location>


Where <location> will represent the location parameter.

Checkpoint 4 Passed
4.
Time for some greenery! Let’s see what happens when we call the function and input the argument "Central Park", a backyard wonder in the heart of New York City.

Checkpoint 5 Passed
5.
The day trip is over and we need to get back to the train station to head home. Change the argument to "Grand Central Station" and call the function again.
What changed in the output?

def generate_trip_instructions(location):
  print("Looks like you are planning a trip to visit " + location)
  print("You can use the public subway system to get to " + location)

generate_trip_instructions("Grand Central Station")


-- Multiple Parameters
Using a single parameter is useful but functions let us use as many parameters as we want! That way, we can pass in more than one input to our functions.

We can write a function that takes in more than one parameter by using commas:

def my_function(parameter1, parameter2, parameter3):
  # Some code


When we call our function, we will need to provide arguments for each of the parameters we assigned in our function definition.

# Calling my_function
my_function(argument1, argument2)


For example take our trip application’s trip_welcome() function that has two parameters:

def trip_welcome(origin, destination):
  print("Welcome to Tripcademy")
  print("Looks like you are traveling from " + origin)
  print("And you are heading to " + destination)


Our two parameters in this function are origin and destination. In order to properly call our function, we need to pass argument values for both of them.

The ordering of your parameters is important as their position will map to the position of the arguments and will determine their assigned value in the function body (more on this in the next exercise!).

Our function call could look like:

trip_welcome("Prospect Park", "Atlantic Terminal")


In this call, the argument value of "Prospect Park" is assigned to be the origin parameter, and the argument value of"Atlantic Terminal" is assigned to the destination parameter.

The output would be:

Welcome to Tripcademy
Looks like you are traveling from Prospect Park
And you are heading to Atlantic Terminal

Tasks:
1.Our travel application users want to calculate the total expenses they may have to incur on a trip.

Write a function called calculate_expenses (replace <function> with the function name) that will have four parameters (in exact order):

plane_ticket_price
car_rental_rate
hotel_rate
trip_time
Each of these parameters will account for a different expense that our users will incur.

Note: Like before, we will see an error: SyntaxError: unexpected EOF while parsing, since there is no code in the body of the function. In the next step we will add statements to the function.

2.Within the body of the function, let’s start to make some calculations for our expenses. First, let’s calculate the total price for a car rental.
Create new variable called car_rental_total that is the product of car_rental_rate and trip_time.

3.Next, we want to apply the same logic but for our hotel_rate.
Create new variable called hotel_total that is the product of hotel_rate and trip_time.
We also have a coupon to give our users some cashback for their hotel visit so subtract 10 from that total in the same statement. Woohoo, coupons! 💵

4.Lastly, create a new variable called trip_total that is the sum of car_rental_total, hotel_total, and plane_ticket_price.
Note: Do not delete return trip_total at the end of the function. This will output your new variable when the function is called.

5.Call your function with the following argument values for the parameters listed:

plane_ticket_price : 200
car_rental_rate : 100
hotel_rate : 100
trip_time: 5
Be sure to call your function inside of print() so you can see the output.

def calculate_expenses(plane_ticket_price, car_rental_rate, hotel_rate, trip_time):
  car_rental_total = car_rental_rate * trip_time
  hotel_total = hotel_rate * trip_time - 10
  trip_total = car_rental_total + hotel_total + plane_ticket_price
  return trip_total

# Step 5: call your function
  calculate_expenses(200, 100, 100, 5)

-- Types of Arguments
20 min
In Python, there are 3 different types of arguments we can give a function.

Positional arguments: arguments that can be called by their position in the function definition.

Keyword arguments: arguments that can be called by their name.

Default arguments: arguments that are given default values.

Positional Arguments are arguments we have already been using! Their assignments depend on their positions in the function call. Let’s look at a function called calculate_taxi_price() that allows our users to see how much a taxi would cost to their destination 🚕.

def calculate_taxi_price(miles_to_travel, rate, discount):
  print(miles_to_travel * rate - discount )


In this function, miles_to_travel is positioned as the first parameter, rate is positioned as the second parameter, and discount is the third. When we call our function, the position of the arguments will be mapped to the positions defined in the function declaration.

# 100 is miles_to_travel
# 10 is rate
# 5 is discount
calculate_taxi_price(100, 10, 5)


Alternatively, we can use Keyword Arguments where we explicitly refer to what each argument is assigned to in the function call. Notice in the code example below that the arguments do not follow the same order as defined in the function declaration.

calculate_taxi_price(rate=0.5, discount=10, miles_to_travel=100)


Lastly, sometimes we want to give our function parameters default values. We can provide a default value to a parameter by using the assignment operator (=). This will happen in the function declaration rather than the function call.

Here is an example where the discount argument in our calculate_taxi_price function will always have a default value of 10:

def calculate_taxi_price(miles_to_travel, rate, discount = 10):
  print(miles_to_travel * rate - discount )


When using a default argument, we can either choose to call the function without providing a value for a discount (and thus our function will use the default value assigned) or overwrite the default argument by providing our own:

# Using the default value of 10 for discount.
calculate_taxi_price(10, 0.5)

# Overwriting the default value of 10 with 20
calculate_taxi_price(10, 0.5, 20)

tasks:
1.Tripcademy (our trusty travel app) needs to allow passengers to plan a trip (duh).
Write a function called trip_planner() that will have three parameters: first_destination, second_destination and final_destination.
Give the final_destination parameter a default value of "Codecademy HQ".
2.First, we want to introduce the trip to users. Use print() in our function to output Here is what your trip will look like!.

def trip_planner(first_destination, second_destination, final_destination = "Codecademy HQ")
    print("Here is what your trip will look like!)

3. In our function definition let’s provide an itinerary that will describe the destinations our user will visit in order. Print a statement that follows this form:
First, we will stop in <first_destination>, then <second_destination>, and lastly <final_destination>
An example call to our function using positional arguments:
trip_planner("London", "India", "New Zealand")
Should output:

Here is what your trip will look like!
First, we will stop in London, then India, and lastly New Zealand

To test out your function, call trip_planner() with the following values for the parameters:
first_destination: "France"
second_destination: "Germany"
final_destination: "Denmark"


def trip_planner(first_destination, second_destination, final_destination="Codecademy HQ"):
  print("Here is what your trip will look like!")
print("First, we will stop in" + first_destination, "then" + second_destination , "lastly" + final_destination)

trip_planner("London", "India", "New Zealand")
trip_planner("France", "Germany", "Denmark")

4.Call the function trip_planner() again with the following values for the parameters:

first_destination: "Denmark"
second_destination: "France"
final_destination: "Germany"
Note the difference in your output depending on the position of your arguments.

5.Call the function trip_planner() again but this time include the keyword arguments (e.g. first_destination) and put them in this exact order:

first_destination = "Iceland"
final_destination = "Germany"
second_destination = "India"

6.Lastly, go ahead and call the function trip_planner() using only two positional arguments to see the default argument in action:

first_destination: "Brooklyn"
second_destination: "Queens"

trip_planner("France", "Germany", "Denmark")
trip_planner("Denmark", "France", "Germany")
trip_planner(first_destination="Iceland", final_destination="Germany", second_destination="India")
trip_planner("Brooklyn", "Queens")


-- Built-in Functions vs User Defined Functions
11 min
There are two distinct categories for 
Preview: Docs Loading link description
functions
 in the world of Python. What we have been writing so far in our exercises are called User Defined Functions - functions that are written by users (like us!).

There is another category called 
Preview: Docs Loading link description
Built-in functions
 - functions that come built into Python for us to use. Remember when we were using 
Preview: Docs Loading link description
print
 or 
Preview: Docs Loading link description
str
? Both of these functions are built into the language for us, which means we have been using built-in functions all along!

There are lots of different built-in functions that we can use in our programs. Take a look at this example of using 
Preview: Docs Loading link description
len()
 to get the length of a string:

destination_name = "Venkatanarasimharajuvaripeta"

# Built-in function: len()
length_of_destination = len(destination_name)

# Built-in function: print()
print(length_of_destination)


Would output the value of length_of_destination:
28

Learn
Introduction to Functions
Built-in Functions vs User Defined Functions
11 min
There are two distinct categories for 
Preview: Docs Loading link description
functions
 in the world of Python. What we have been writing so far in our exercises are called User Defined Functions - functions that are written by users (like us!).

There is another category called 
Preview: Docs Loading link description
Built-in functions
 - functions that come built into Python for us to use. Remember when we were using 
Preview: Docs Loading link description
print
 or 
Preview: Docs Loading link description
str
? Both of these functions are built into the language for us, which means we have been using built-in functions all along!

There are lots of different built-in functions that we can use in our programs. Take a look at this example of using 
Preview: Docs Loading link description
len()
 to get the length of a string:

destination_name = "Venkatanarasimharajuvaripeta"

# Built-in function: len()
length_of_destination = len(destination_name)

# Built-in function: print()
print(length_of_destination)


Would output the value of length_of_destination:

28

Here we are using a total of two built-in functions in our example: print(), and len().

There are even more obscure ones like 
Preview: Docs Loading link description
help()
 where Python will print a link to documentation for us and provide some details:

help("string")


Would output (shortened for readability):

NAME
    string - A collection of string constants.

MODULE REFERENCE
    https://docs.python.org/3.8/library/string
    
    The following documentation is automatically generated from the Python
    source files.  It may be incomplete, incorrect or include features that
    are considered implementation detail and may vary between Python
    implementations.  When in doubt, consult the module reference at the
    location listed above.
.....
